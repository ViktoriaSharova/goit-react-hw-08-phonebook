{"version":3,"file":"static/js/105.40fdbce6.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","redux/Contacts/Selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  margin: auto;\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid #ccc;\n  margin-bottom: 10px;\n`;\n\nexport const ListItemBtn = styled.button`\n  border: 1px solid grey;\n  background-color: white;\n  cursor: pointer;\n  color: #fff;\n  padding: 5px 10px;\n  border: none;\n  border-radius: 5px;\n`;","\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, ListItemBtn } from './ContactList.styled';\nimport { selectFilter } from '../../redux/Contacts/Selectors'\nimport { deleteContacts } from '../../redux/Contacts/Operations';\nimport { selectContacts } from '../../redux/Contacts/Selectors';\n\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const stateFilter = useSelector(selectFilter);\n\n  const visibleContacts = contacts && contacts.filter(contact => {\n    const hasFilteredName = contact.name\n      .toLowerCase()\n      .includes((stateFilter || '').toLowerCase());\n\n    return hasFilteredName;\n  });\n\n  const handleDelete = contactId => {\n    dispatch(deleteContacts(contactId));\n  };\n\n  return (\n    <>\n      {visibleContacts && visibleContacts.length > 0 && (\n        <List>\n          {visibleContacts.map(contact => (\n            <ListItem key={contact.id}>\n              <p>\n                {contact.name}: {contact.number}\n              </p>\n              <ListItemBtn onClick={() => handleDelete(contact.id)}>\n                Delete\n              </ListItemBtn>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};","import { Field, Form } from 'formik';\nimport { styled } from 'styled-components';\n\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 300px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n\n    div {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormField = styled(Field)`\n  margin-top: 10px;\n  width: 200px;\n`;\n\nexport const FormBtn = styled.button`\n  display: block;\n  width: 150px;\n  border-radius: 5px;\n  background-color: lightblue;\n  cursor: pointer;\n`;","import { Formik } from 'formik';\nimport {\n    FormWrapper,\n    FormField,\n    FormLabel,\n    FormBtn,\n} from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/Contacts/Operations';\nimport { selectContacts } from '../../redux/Contacts/Selectors';\n\nconst contactsSheme = Yup.object().shape({\n  name: Yup.string().required('Required'),\n  number: Yup.string().required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = value => {\n    const hasName = contacts.some(contact => contact.name === value.name);\n    if (hasName) {\n      alert(`${value.name} is already in contacts.`);\n      return;\n    } else {\n      dispatch(addContacts(value));\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactsSheme}\n      onSubmit={(values, actions) => {\n        handleSubmit(values);\n        actions.resetForm();\n      }}\n    >\n      <FormWrapper>\n      <div>\n        <FormLabel>\n          Name\n          <FormField name=\"name\" />\n        </FormLabel>\n        </div>\n        <div>\n        <FormLabel>\n          Number\n          <FormField name=\"number\" />\n          </FormLabel>\n          </div>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </FormWrapper>\n    </Formik>\n  );\n};","import styled from 'styled-components';\n\nexport const FilterText = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n`;\n\nexport const InputFilter = styled.input`\n  padding: 5px;\n  font-size: 16px;\n  padding: 5px;\n  font-size: 16px;\n  width: 300px;\n  margin: auto;\n`;","import { useDispatch } from 'react-redux';\nimport { filters } from '../../redux/Contacts/ContactsSlice';\nimport { FilterText, InputFilter } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const updateFilter = value => {\n    dispatch(filters(value));\n  };\n  return (\n      <FilterText>Find contact by name\n      <InputFilter\n        type=\"text\"\n        name=\"search\"\n        placeholder=\"Type name\"\n        onChange={evt => updateFilter(evt.target.value)}\n      ></InputFilter>\n    </FilterText>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { fetchContacts } from '../redux/Contacts/Operations';\nimport { selectIsLoading } from '../redux/Contacts/Selectors';\nimport { Filter } from '../components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Loading... Please wait.'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","ListItem","_templateObject2","ListItemBtn","_templateObject3","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","ContactList","dispatch","useDispatch","useSelector","stateFilter","visibleContacts","contact","name","toLowerCase","includes","_jsx","_Fragment","children","length","map","_jsxs","number","onClick","contactId","id","deleteContacts","FormWrapper","Form","FormLabel","FormField","Field","FormBtn","_templateObject4","contactsSheme","Yup","shape","required","ContactForm","Formik","initialValues","validationSchema","onSubmit","values","actions","value","some","alert","concat","addContacts","resetForm","type","FilterText","InputFilter","Filter","placeholder","onChange","evt","target","filters","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}